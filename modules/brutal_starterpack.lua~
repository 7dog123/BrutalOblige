STARTERPACK = { }

math.randomseed( os.time() ) --get some randomisation
math.random()
math.random()

local boss1 = "cyberdemon"
local boss2 = "mastermind"

--Banners etc----------------------------------------------------------
function STARTERPACK.decorate()

  local data =
	{
		'actor classicwolf : WolfensteinSS 313\n'
		'{\n'
		'}\n'
		'actor NukemDecal1\n'
		'{\n'
		  'Radius 2\n'
		  'Height 2\n'
		  'Damage 0\n'
		  'Speed 100\n'
		  'Decal NUKEM\n'
		  'Projectile\n'
		  '+RIPPER\n'
		  '+BLOODLESSIMPACT\n'
		  'States\n'
		  '{\n'
		  'Spawn:\n'
		    'TNT1 A 1\n'
		    'goto Death\n' --only lasting 1 tic give it enough time to hit a nearby wall but not enough to cross a room (and hit a pillar)
		  'Death:\n'
		    'TNT1 A 1\n'
		    'stop\n'
		  '}\n'
		'}\n'
		'actor NukemPainter 12400\n'
		'{\n'
		  '//$Category decals\n'
		  'Radius 36\n'
		  'Height 2\n'
		  '+NOINTERACTION\n'
		  '+NOGRAVITY\n'
		  'States\n'
		  '{\n'
		  'Spawn:\n'
			'TNT1 A 0\n'
			'TNT1 A 0 A_JumpIf(ceilingz-floorz<height,"End")\n'
			'TNT1 A 0 A_Jump(256,"Angle1","Angle2","Angle3","Angle4")\n'
			'Goto Paint\n'
		  'Angle1:\n'
		    	'TNT1 A 0 A_SetAngle(0)\n'
		    	'Goto Paint\n'
		  'Angle2:\n'
		    	'TNT1 A 0 A_SetAngle(90)\n'
		    	'Goto Paint\n'
		  'Angle3:\n'
		    	'TNT1 A 0 A_SetAngle(180)\n'
		    	'Goto Paint\n'
		  'Angle4:\n'
		    	'TNT1 A 0 A_SetAngle(270)\n'
		    	'Goto Paint\n'
		  'Paint:\n'
		    	'TNT1 A 1 A_SpawnItemEx ("NukemDecal1", 0, 0, 40, 100, 0, 0, 0, 0, 0)\n'
		    	'Goto End\n'
		  'End:\n'
			'TNT1 A -1\n'
		    	'Stop\n'
		  '}\n'
		'}\n'
		'actor GrafDecal : NukemDecal1\n'
		'{\n'
			'Decal GRAFFITI\n'
		'}\n'
		'actor GraffitiPainter : NukemPainter 12401\n'
		'{\n'
		  'States\n' --had to do all the states otherwise it did the nukem posters. Don't know why.
		  '{\n'
		  'Spawn:\n'
			'TNT1 A 0\n'
			'TNT1 A 0 A_JumpIf(ceilingz-floorz<height,"End")\n'
			'TNT1 A 0 A_Jump(256,"Angle1","Angle2","Angle3","Angle4")\n'
			'Goto Paint\n'
		  'Angle1:\n'
		    	'TNT1 A 0 A_SetAngle(0)\n'
		    	'Goto Paint\n'
		  'Angle2:\n'
		    	'TNT1 A 0 A_SetAngle(90)\n'
		    	'Goto Paint\n'
		  'Angle3:\n'
		    	'TNT1 A 0 A_SetAngle(180)\n'
		    	'Goto Paint\n'
		  'Angle4:\n'
		    	'TNT1 A 0 A_SetAngle(270)\n'
		    	'Goto Paint\n'
		  'Paint:\n'
		    	'TNT1 A 1 A_SpawnItemEx ("GrafDecal", 0, 0, random(0,40), 100, 0, 0, 0, 0, 0)\n'
		    	'Goto End\n'
		  'End:\n'
			'TNT1 A -1\n'
		    	'Stop\n'
		  '}\n'
		'}\n'
		'actor WolfDecal : NukemDecal1\n'
		'{\n'
			'Decal WOLF\n'
		'}\n'
		'actor WolfPainter : NukemPainter 12402\n'
		'{\n'
		  'States\n'
		  '{\n'
		  'Spawn:\n'
			'TNT1 A 0\n'
			'TNT1 A 0 A_JumpIf(ceilingz-floorz<height,"End")\n'
			'TNT1 A 0 A_Jump(256,"Angle1","Angle2","Angle3","Angle4")\n'
			'Goto Paint\n'
		  'Angle1:\n'
		    	'TNT1 A 0 A_SetAngle(0)\n'
		    	'Goto Paint\n'
		  'Angle2:\n'
		    	'TNT1 A 0 A_SetAngle(90)\n'
		    	'Goto Paint\n'
		  'Angle3:\n'
		    	'TNT1 A 0 A_SetAngle(180)\n'
		    	'Goto Paint\n'
		  'Angle4:\n'
		    	'TNT1 A 0 A_SetAngle(270)\n'
		    	'Goto Paint\n'
		  'Paint:\n'
		    	'TNT1 A 1 A_SpawnItemEx ("WolfDecal", 0, 0, 132, 100, 0, 0, 0, 0, 0)\n'
		    	'Goto End\n'
		  'End:\n'
			'TNT1 A -1\n'
		    	'Stop\n'
		  '}\n'
		'}\n'
	}


--chose the bosses
   local r = rand.irange(1,3)
   if r == 2 then
	boss1 = "infernal"
   elseif r == 3 then
	boss1 = "cyberlordmajor"
   end
   r = rand.irange(1,2)
   if r == 2 and boss1 != "cyberlordmajor" then
	boss2 = "cyberlordminor"
   end

   if boss1 == "infernal" then
	table.insert(data, 'ACTOR ObligeInfernal : Infernal replaces CyberdemonBoss\n{\n}\n')
   elseif boss1 == "cyberlordmajor" then
	table.insert(data, 'ACTOR ObligeCyberdemonLord : CyberdemonLord replaces CyberdemonBoss\n{\n}\n')
   end
   if boss2 == "cyberlordminor" then
	table.insert(data, 'ACTOR ObligeCyberdemonLordMinor : CyberdemonLordMinor replaces SuperMasterMind\n{\n}\n')
   end

    gui.wad_add_text_lump("DECORATE", data);
    
    local decaldata =
    {
	'decal NUKEM1\n'
	'{\n'
	'pic DNZPOS30\n'
	'}\n'
	'decal NUKEM2\n'
	'{\n'
	'pic DNZPOS04\n'
	'}\n'
	'decal NUKEM3\n'
	'{\n'
	'pic DNZPOS02\n'
	'}\n'
	'decal NUKEM4\n'
	'{\n'
	'pic DNZPOS03\n'
	'}\n'
	'decal NUKEM5\n'
	'{\n'
	'pic DNZPOS29\n'
	'}\n'
	'decal NUKEM6\n'
	'{\n'
	'pic DNZPOS05\n'
	'}\n'
	'decalgroup NUKEM\n'
	'{\n'
	'NUKEM1	2\n'
	'NUKEM2	2\n'
	'NUKEM3	2\n'
	'NUKEM4	2\n'
	'NUKEM5	1\n'
	'NUKEM6	1\n'
	'}\n'
	--in no particular order....
	'decal GRAFFITI1\n'
	'{\n'
	'pic DNPIX1\n'
	'}\n'
	'decal GRAFFITI2\n'
	'{\n'
	'pic DNPIX2\n'
	'}\n'
	'decal GRAFFITI3\n'
	'{\n'
	'pic DNPIX3\n'
	'}\n'
	'decal GRAFFITI4\n'
	'{\n'
	'pic DNPIX4\n'
	'}\n'
	'decal GRAFFITI5\n'
	'{\n'
	'pic DNPIX5\n'
	'randomflipx\n'
	'}\n'
	'decal GRAFFITI6\n'
	'{\n'
	'pic DNPIX5\n'
	'shade "ff 00 00"\n'
	'}\n'
	'decal GRAFFITI7\n'
	'{\n'
	'pic DNPIX5\n'
	'randomflipx\n'
	'x-scale 0.25\n'
	'y-scale 0.25\n'
	'}\n'
	'decal GRAFFITI8\n'
	'{\n'
	'pic DNPIX5\n'
	'randomflipx\n'
	'x-scale 1.25\n'
	'y-scale 1.25\n'
	'}\n'
	'decal GRAFFITI9\n'
	'{\n'
	'pic DNPIX1\n'
	'x-scale 1.5\n'
	'y-scale 1.5\n'
	'}\n'
	'decal GRAFFITI10\n'
	'{\n'
	'pic DNPIX1\n'
	'x-scale 0.75\n'
	'y-scale 0.75\n'
	'}\n'
	'decal GRAFFITI11\n'
	'{\n'
	'pic DNPIX11\n'
	'shade "ff 00 00"\n'
	'x-scale 1.25\n'
	'y-scale 1.25\n'
	'}\n'
	'decalgroup GRAFFITI\n'
	'{\n'
	'GRAFFITI1	1\n'
	'GRAFFITI2	1\n'
	'GRAFFITI3	1\n'
	'GRAFFITI4	1\n'
	'GRAFFITI5	1\n'
	'GRAFFITI6	1\n'
	'GRAFFITI7	1\n'
	'GRAFFITI8	1\n'
	'GRAFFITI9	1\n'
	'GRAFFITI10	1\n'
	'GRAFFITI11	1\n'
	'}\n'
	--wolfenstein
	'decal WOLF1\n'
	'{\n'
	'pic ZZNAZIA\n'
	'}\n'
	'decal WOLF2\n'
	'{\n'
	'pic ZZNAZIB\n'
	'}\n'
	'decal WOLF3\n'
	'{\n'
	'pic ZZNAZIC\n'
	'}\n'
	'decal WOLF4\n'
	'{\n'
	'pic ZZNAZID\n'
	'}\n'
	'decal WOLF5\n'
	'{\n'
	'pic ZZNAZIE\n'
	'}\n'
	'decal WOLF6\n'
	'{\n'
	'pic ZZNAZIF\n'
	'}\n'
	'decalgroup WOLF\n'
	'{\n'
	'WOLF1	1\n'
	'WOLF2	1\n'
	'WOLF3	1\n'
	'}\n'
    }
    gui.wad_add_text_lump("DECALDEF", decaldata);
end

STARTERPACK.PICKUPS =
{
	  nukembanners =
	  {
	    	id = 12400
		r = 36
		h = 128
	    	kind = "health"  --not ideal but it works
	    	rank = 1
	    	add_prob = 0
	    	give = { {health=1} } --so it doesn't screw the player by not having any actual health packs
		theme = "nukem"
		theme_prob = 50 --because I'm rubbish at lua add_prob must always be zero and enter the desired prob as theme_prob if you want it theme specific 
	  }
	  graffiti =
	  {
	    	id = 12401
		r = 36
		h = 128
	    	kind = "health"  --not ideal but it works
	    	rank = 1
	    	add_prob = 0
	    	give = { {health=1} } --so it doesn't screw the player by not having any actual health packs
		theme = "nukem"
		theme_prob = 200
	  }
	  wolfbanners =
	  {
	    	id = 12402
		r = 128
		h = 134
	    	kind = "health"  --not ideal but it works
	    	rank = 1
	    	add_prob = 0
	    	give = { {health=1} } --so it doesn't screw the player by not having any actual health packs
		theme = "wolf"
		theme_prob = 0
	  }
}

STARTERPACK.EXTRASTUFF =
{
	  trashcan1 =
	  {
	    	id = 1312
		r = 8
		h = 16
	    	add_prob = 50
		theme = "urban"
		theme_prob = 50
	  }
	  trashbag =
	  {
	    	id = 1315
		r = 12
		h = 16
	    	add_prob = 200
		theme = "urban"
		theme_prob = 75
	  }
	  extinguisher =
	  {
	    	id = 1281
		r = 12
		h = 16
	    	add_prob = 50
		theme = "urban"
		theme_prob = 50
	  }
}

--function STARTERPACK.bannersetup()
--  gui.printf("starterpack banner setup starts here\n")
--  if OB_CONFIG.theme == STARTERPACK.PICKUPS.nukembanners.theme then
--    gui.printf("theme matches\n")
--    GAME.PICKUPS["nukembanners"].add_prob=50
--  end
--  if OB_CONFIG.theme == STARTERPACK.PICKUPS.graffiti.theme then
--    gui.printf("theme matches\n")
--    GAME.PICKUPS["graffiti"].add_prob=200
--  end
--  if OB_CONFIG.theme == STARTERPACK.PICKUPS.wolfbanners.theme then
--    gui.printf("wolf theme matches\n")
--    GAME.PICKUPS["wolfbanners"].add_prob=50
--  end
--end

function STARTERPACK.bannersetup()

    for _,P in pairs(GAME.PICKUPS) do
      if P.theme == OB_CONFIG.theme then
	gui.printf("theme matches\n")
        P.add_prob = P.theme_prob
      end
    end
end

function STARTERPACK.texturesetup()
  local data =
  {
	'texture SP_DUDE6, 64, 128\n'
	'{\n'
		'Patch WALL48_2, 0, 0\n'
		'Graphic CRANK, 2, -155\n'
		'Graphic CRANK, 20, -155\n'
		'Graphic BOSSJ0, 6, 32\n'
	'}\n'
	'texture SKINTEK2, 64, 128\n'
	'{\n'
	   'XScale 1.0\n'
	   'YScale 1.0\n'
	   'Patch GTGREN01, 0, 0\n'
	'}\n'
	'texture WLFBANNR, 512, 128\n'
	'{\n'
		'Patch WOLF1, 0, 0\n'
		'Patch WOLF1, 128, 0\n'
		'Patch ZZNAZIB, 128, 0\n'
		'Patch WOLF1, 256, 0\n'
		'Patch WOLF1, 384, 0\n'
		'Patch ZZNAZIC, 384, 0\n'
		'Patch WOLF1, 0, 128\n'
	'}\n'
  }
    gui.wad_add_text_lump("TEXTURES", data);
end

---themes-------------------
STARTERPACK.MATERIALS =
{
  TEKWALL2  = { t="TEKWALL2",    f="TEKWALL2" }
  TEKWALL5  = { t="TEKWALL5",    f="TEKWALL5" }
  MONITOR1  = { t="MONITOR1",    f="MONITOR1" }
  MONITOR2  = { t="MONITOR2",    f="MONITOR2" }
  COMPTILE  = { t="COMPTILE",    f="COMPTILE" }
  COMPTILY  = { t="COMPTILY",    f="COMPTILY" }
  COMPTILG  = { t="COMPTILG",    f="COMPTILG" }
  COMPTILR  = { t="COMPTILR",    f="COMPTILR" }
  COMP001  = { t="COMP001",    f="COMP001" }
  CRAK1  = { t="CRAK1",    f="CRAK1" }
  CRAK2  = { t="CRAK2",    f="CRAK2" }
  CRAK3  = { t="CRAK3",    f="CRAK3" }
  CRAK4  = { t="CRAK4",    f="CRAK4" }
  CRAK5  = { t="CRAK5",    f="CRAK5" }
  COMP2  = { t="COMP2",    f="COMP2" }
  COMP002  = { t="COMP002",    f="COMP002" }
  COMP003  = { t="COMP003",    f="COMP003" }
  COMP004  = { t="COMP004",    f="COMP004" }
  COMP005  = { t="COMP005",    f="COMP005" }
  COMP006  = { t="COMP006",    f="COMP006" }
  COMP007  = { t="COMP007",    f="COMP007" }
  COMP008  = { t="COMP008",    f="COMP008" }
  COMP009  = { t="COMP009",    f="COMP009" }
  COMP010  = { t="COMP010",    f="COMP010" }
  COMP011  = { t="COMP011",    f="COMP011" }
  COMP012  = { t="COMP012",    f="COMP012" }

  TILEWALL  = { t="TILEWALL",    f="TILEWALL" }

  B010035  = { t="B010035",    f="B010035" }
  B010100  = { t="B010110",    f="B010110" }
  B0130  = { t="B0130",    f="B0130" }
  B0163BW  = { t="B0163BW",    f="B0163BW" }
  B0163C  = { t="B0163C",    f="B0163C" }
  B0164  = { t="B0164",    f="B0164" }
  B0118  = { t="B0118",    f="B0118" }
  B0119  = { t="B0119",    f="B0119" }
  B0367  = { t="B0367",    f="B0367" }
  B03972BW  = { t="B03972BW",    f="B03972BW" }

  SNOW1  = { t="NATUR04",    f="SNOW1" }
  SNOW2  = { t="NATUR04",    f="SNOW2" }
  SNOW3  = { t="NATUR04",    f="SNOW3" }

  FBRICK1  = { t="FBRICK1",    f="FBRICK1" }
  FBRICK2  = { t="FBRICK2",    f="FBRICK2" }
  FBRICK3  = { t="FBRICK3",    f="FBRICK3" }
  FBRICK4  = { t="FBRICK4",    f="FBRICK4" }
  FBRICK5  = { t="FBRICK5",    f="FBRICK5" }
  FBRICK6  = { t="FBRICK6",    f="FBRICK6" }
  FBRICK7  = { t="FBRICK7",    f="FBRICK7" }
  FBRICK8  = { t="FBRICK8",    f="FBRICK8" }
  FBRICK9  = { t="FBRICK9",    f="FBRICK9" }

  DNCITY20  = { t="DNCITY20",    f="DNCITY20" }
  DNCITY21  = { t="DNCITY21",    f="DNCITY21" }
  DNCITY27  = { t="DNCITY27",    f="DNCITY27" }
  DNCITY29  = { t="DNCITY29",    f="DNCITY29" }

-- BRICK01-BRICK38 not included yet, there are already loads of bricks
  BRICK26  = { t="BRICK26",    f="BRICK26" }
  BRICK28  = { t="BRICK28",    f="BRICK28" } --apart from these 2 which I need for wolfenstein

  CEMENTWA  = { t="CEMENTWA",    f="CEMENTWA" }
  CEMENTRE  = { t="CEMENTRE",    f="CEMENTRE" }
  CEMENTBL  = { t="CEMENTBL",    f="CEMENTBL" }

  DNMETAL1  = { t="DNMETAL1",    f="DNMETAL1" }
  DNMETAL2  = { t="DNMETAL2",    f="DNMETAL2" }
  DNMETAL3  = { t="DNMETAL3",    f="DNMETAL3" }
  DNMETAL4  = { t="DNMETAL4",    f="DNMETAL4" }
  DNMETAL5  = { t="DNMETAL5",    f="DNMETAL5" }
  DNMETAL6  = { t="DNMETAL6",    f="DNMETAL6" }
  DNMETAL7  = { t="DNMETAL7",    f="DNMETAL7" }

  RUBLE1  = { t="RUBLE1",    f="RUBLE1" }

  DNSTEP01  = { t="DNSTEP01",    f="DNSTEP01" }
  DNSTEP02  = { t="DNSTEP02",    f="DNSTEP02" }
  DNSTEP03  = { t="DNSTEP03",    f="DNSTEP03" }
  DNSTEP04  = { t="DNSTEP04",    f="DNSTEP04" }
  DNSTEP05  = { t="DNSTEP05",    f="DNSTEP05" }
  DNSTEP06  = { t="DNSTEP06",    f="DNSTEP06" }
  DNSTEP07  = { t="DNSTEP07",    f="DNSTEP07" }
  DNSTEP08  = { t="DNSTEP08",    f="DNSTEP08" }
  DNSTEP09  = { t="DNSTEP09",    f="DNSTEP09" }
  DNSTEP10  = { t="DNSTEP10",    f="DNSTEP10" }
  DNSTEP11  = { t="DNSTEP11",    f="DNSTEP11" }
  DNSTEP12  = { t="DNSTEP12",    f="DNSTEP12" }
  DNSTEP13  = { t="DNSTEP13",    f="DNSTEP13" }
  DNSTEP14  = { t="DNSTEP14",    f="DNSTEP14" }
  DNSTEP15  = { t="DNSTEP15",    f="DNSTEP15" }
  DNSTEP16  = { t="DNSTEP16",    f="DNSTEP16" }
  DNSTEP17  = { t="DNSTEP17",    f="DNSTEP17" }

  DIRT01  = { t="DIRT01",    f="DIRT01" }
  DIRT02  = { t="DIRT02",    f="DIRT02" }
  DIRT03  = { t="DIRT03",    f="DIRT03" }
  DIRT04  = { t="DIRT04",    f="DIRT04" }
  DIRT05  = { t="DIRT05",    f="DIRT05" }
  DIRT06  = { t="DIRT06",    f="DIRT06" }
  DIRT07  = { t="DIRT07",    f="DIRT07" }
  DIRT08  = { t="DIRT08",    f="DIRT08" }

  WHITE  = { t="WHITE",    f="WHITE" }
  BLACK  = { t="BLACK",    f="BLACK" }

  DNLT02  = { t="DNLT02",    f="DNLT02" }
  DNLT03  = { t="DNLT03",    f="DNLT03" }
  DNLT04  = { t="DNLT04",    f="DNLT04" }
  DNLT05  = { t="DNLT05",    f="DNLT05" }
  DNLT06  = { t="DNLT06",    f="DNLT06" }
  DNLT07  = { t="DNLT07",    f="DNLT07" }

  DNCITY05  = { t="DNCITY05",    f="DNCITY05" }
  DNCITY06  = { t="DNCITY06",    f="DNCITY06" }
  DNCITY07  = { t="DNCITY07",    f="DNCITY07" }
  DNCITY08  = { t="DNCITY08",    f="DNCITY08" }
  DNCITY11  = { t="DNCITY11",    f="DNCITY11" }
  DNCITY12  = { t="DNCITY12",    f="DNCITY12" }
  DNCITY13  = { t="DNCITY13",    f="DNCITY13" }
  DNCITY14  = { t="DNCITY14",    f="DNCITY14" }
  DNCITY15  = { t="DNCITY15",    f="DNCITY15" }

  DNRUST01  = { t="DNRUST01",    f="DNRUST01" }
  DNRUST02  = { t="DNRUST02",    f="DNRUST02" }
  DNRUST03  = { t="DNRUST03",    f="DNRUST03" }
  DNRUST04  = { t="DNRUST04",    f="DNRUST04" }
  DNRUST05  = { t="DNRUST05",    f="DNRUST05" }
  DNRUST06  = { t="DNRUST06",    f="DNRUST06" }
  DNRUST07  = { t="DNRUST07",    f="DNRUST07" }
  DNRUST08  = { t="DNRUST08",    f="DNRUST08" }

  DNPLUM06  = { t="DNPLUM06",    f="DNPLUM06" }

  GTGREN01  = { t="GTGREN01",    f="GTGREN01" }
  GTGREN02  = { t="GTGREN02",    f="GTGREN02" }
  GTGREN03  = { t="GTGREN03",    f="GTGREN03" }
  GTGREN04  = { t="GTGREN04",    f="GTGREN04" }
  GTGREN05  = { t="GTGREN05",    f="GTGREN05" }

  GTGRN02  = { t="GTGRN02",    f="GTGRN02" }
  GTGRN03  = { t="GTGRN03",    f="GTGRN03" }

  HEROK01  = { t="HEROK01",    f="HEROK01" }
  HEROK02  = { t="HEROK02",    f="HEROK02" }
  HEROK03  = { t="HEROK03",    f="HEROK03" }
  HEROK04  = { t="HEROK04",    f="HEROK04" }
  HEROK05  = { t="HEROK05",    f="HEROK05" }

  ICE  = { t="ICE",    f="ICE" }

  HEALTAR1  = { t="HEALTAR1",    f="HEALTAR1" }
  HEALTAR2  = { t="HEALTAR2",    f="HEALTAR2" }

  HEBRIK01  = { t="HEBRIK01",    f="HEBRIK01" }
  HEBRIK02  = { t="HEBRIK02",    f="HEBRIK02" }

  HEFLOR12  = { t="HEFLOR12",    f="HEFLOR12" }  --animated

  WOLFBANNERS  = { t="WLFBANNR",    f="WLFBANNR", sane=1 }
}

STARTERPACK.THEMES =
{
  nukem_DEFAULTS =
  {
    liquids =
    {
      water = 80
      slime = 40
      blood = 25
      lava  = 5
    }

    facades =
    {
      DNCITY27 = 80
      DNCITY29 = 80
      DNCITY11 = 80
      DNCITY12 = 80
      DNCITY15 = 80
      CEMENT7 = 5
      CEMENT9 = 5
      METAL2 = 3
    }

    outdoor_torches =
    {
      lamp   = 10
      mercury_lamp = 40
      short_lamp   = 40
      burning_barrel = 30
    }

    base_skin =
    {
    }

    monster_prefs =
    {
    }

    archy_arches = true
  }


  nukem_Panel =
  {
    kind = "building"
    prob = 50

    walls =
    {
      PANEL6 = 25
      PANEL8 = 25
      PANEL9 = 15
      PANEL7 = 10
      PANEL3 = 25
      PANEL2 = 25
      PANCASE2 = 15

      DNCITY15 = 100
    }

    floors =
    {
      FLOOR0_2 = 15
      FLOOR5_3 = 20
      FLOOR5_4 = 15
      FLAT1_1 = 50
      FLAT4 = 50
      FLAT1 = 30
      FLAT8 = 10
      FLAT5_5 = 30
      FLAT5 = 20
    }

    ceilings =
    {
      FLAT1 = 50
      CEIL1_1 = 20
      FLAT5_2 = 20
      CEIL3_3 = 10
      RROCK10 = 20
    }
  }


  nukem_Brick =
  {
    kind = "building"
    prob = 70

    walls =
    {
      BRICK1  = 10
      BRICK2  = 15
      BRICK5  = 30
      BRICK6  = 20
      BRICK7  = 30
      BRICK8  = 15
      BRICK9  = 20
      BRICK12 = 30
      BRICK11 = 3
      BRICK10 = 5

      DNCITY27 = 100
      DNCITY29 = 100
      DNCITY11 = 100
      DNCITY12 = 100
    }

    floors =
    {
      FLAT1_1 = 50
      FLAT1   = 30
      FLAT5   = 15
      FLAT5_1 = 50
      FLAT5_2 = 20
      FLAT5_2 = 30
      FLAT5_4 = 20
      FLAT5_5 = 30
      FLAT8   = 50

      FLOOR0_1 = 20
      FLOOR0_2 = 20
      FLOOR0_3 = 20
      FLOOR4_6 = 20
      FLOOR5_3 = 25
      FLOOR5_4 = 10
    }

    ceilings =
    {
      FLAT1   = 50
      FLAT5_4 = 20
      FLAT8   = 15
      RROCK10 = 20
      RROCK14 = 20
      MFLR8_1 = 10
      SLIME13 = 5
    }
  }


  nukem_Hallway =
  {
    kind = "hallway"

    walls =
    {
      WOOD1    = 90
      WOOD12   = 90
      WOOD9    = 90
      WOODVERT = 90

      DNCITY27 = 50
      DNCITY29 = 50
      BRICK10  = 50
      BRICK11  = 10

      PANEL1   = 50
      PANEL7   = 30
      STUCCO   = 30
      STUCCO1  = 30
      STUCCO3  = 30
    }

    floors =
    {
      FLAT5_1 = 50
      FLAT5_2 = 20
      FLAT8   = 50
      FLAT5_4 = 50
      MFLR8_1 = 50
      FLOOR5_3 = 20
      FLAT5 = 20
    }

    ceilings =
    {
      CEIL1_1 = 30
      FLAT5_2 = 25
      CEIL3_5 = 20
      MFLR8_1 = 50
      FLAT1   = 30
    }
  }


  nukem_Cave =
  {
    kind = "cave"

    naturals =
    {
      ROCK2    = 40
      ASHWALL2 = 40
      ASHWALL4 = 30
      ZIMMER1  = 30

      BSTONE2  = 10
      ZIMMER5  = 20
      ZIMMER3  = 20

      STONE5   = 10
      ASHWALL7 = 10
      ROCK5    = 10
      WOOD9    = 10
    }
  }


  nukem_Outdoors =
  {
    kind = "outdoors"

    floors =
    {
      STONE = 50
      FLAT5_2 = 50
    }

    naturals =
    {
      ASHWALL2 = 50
      ASHWALL4 = 50
      BSTONE1  = 15
      ZIMMER5  = 15
      ROCK3    = 70
    }
  }
--wolfenstein updates---
  wolf_Outdoors =
  {
    kind = "outdoors"

    floors =
    {
      BRICK28 = 30
      BRICK26 = 30
      RROCK13 = 10
    }

    naturals =
    {
      SNOW2 = 50
      SNOW3 = 20
      SNOW1 = 20
    }
  }

  wolf_DEFAULTS =
  {
    prob = 10

    square_caves = 1

    facades =
    {
      ZZWOLF1  = 50
      ZZWOLF9  = 50
      ZZWOLF11 = 20
      WOLFBANNERS = 10
      ZZWOLF5  = 5
    }

    monster_prefs =
    {
      BrutalSS = 100
      ClassicSS = 200
      GermanDog = 100
    }

    base_skin =
    {
      big_door = "ZELDOOR"
    }

    style_list =
    {
      caves = { none=40, few=60, some=10 }
    }
  }
--tech updates----------------------------
  tech_Hallway =
  {
    kind = "hallway"

    walls =
    {
      BROWNGRN = 90
      BROWN1   = 90
      GRAY1    = 70

      TEKWALL6 = 30
      TEKWALL4 = 10
      TEKGREN1 = 40
      STARGR1 = 10
      STARBR2 = 10

      BROWNPIP = 20
      PIPEWAL2 = 40
      PIPE2 = 15
      PIPE4 = 15

      TEKWALL2 = 30
      TEKWALL5 = 30
    }

    floors =
    {
      FLAT4  = 50
      FLAT14 = 50
      FLAT1  = 20
      FLOOR4_8 = 15
      FLOOR0_2 = 20
      CEIL4_1 = 20
    }

    ceilings =
    {
      CEIL3_5 = 50
      CEIL3_1 = 50
      RROCK03 = 50
      CEIL4_2 = 20
      CEIL5_1 = 40
    }
  }
  tech_Computer =
  {
    prob = 10
    kind = "building"

    walls =
    {
      COMPSPAN = 30
      COMPOHSO = 10
      COMPTILE = 15
      COMPBLUE = 15
      TEKWALL4 = 3

      COMPTILY = 15
      COMPTILG = 15
      COMPTILR = 15
    }

    floors =
    {
      FLAT14 = 50
      FLOOR1_1 = 15
      FLAT4 = 10
      CEIL4_1 = 20
      CEIL4_2 = 20
      CEIL5_1 = 20
    }


    ceilings =
    {
      CEIL5_1 = 50
      CEIL4_1 = 15
      CEIL4_2 = 15
    }
  }

}

--Monsters------------------------------
STARTERPACK.MONSTERS = 
{
  ClassicSS =
  {
    id = 313
    r = 20
    h = 56 
    level = 1
    theme = "wolf"
    prob = 20
    crazy_prob = 7
    health = 50
    damage = 5
    attack = "hitscan"
    give = { {ammo="bullet",count=5} }
    density = 1.5
  }
  GermanDog =
  {
    id = 4395
    r = 12
    h = 28 
    level = 1
    theme = "wolf"
    prob = 60
    health = 80
    damage = 1
    attack = "melee"
    min_weapon = 1
    room_size = "any"
  }
  HeavyMachinegun =
  {
    id = 2567
    r = 20
    h = 56 
    level = 1
    prob = 10
    health = 60
    damage = 50
    attack = "hitscan"
    min_weapon = 4
    room_size = "large"
    cage_factor = 0
  }
}

--Maps---------------------------------------------------------------------------------------
STARTERPACK.SECRET_EXITS =
{
  --set all to false so only those chosen by the function can be true
  MAP01 = false
  MAP02 = false
  MAP03 = false
  MAP04 = false
  MAP05 = false
  MAP06 = false
  MAP07 = false
  MAP08 = false
  MAP09 = false
  MAP10 = false
  MAP11 = false
  MAP12 = false
  MAP13 = false
  MAP14 = false
  MAP15 = false
  MAP16 = false
  MAP17 = false
  MAP18 = false
  MAP19 = false
  MAP20 = false
  MAP21 = false
  MAP22 = false
  MAP23 = false
  MAP24 = false
  MAP25 = false
  MAP26 = false
  MAP27 = false
  MAP28 = false
  MAP29 = false
  MAP30 = false
  MAP31 = true  --to 32
  MAP32 = false
}

secretexit1 = math.random(1,9)
secretexit2 = math.random(11,19)
secretexit3 = math.random(20,29)

function STARTERPACK.setsecretexits()
  --GAME.SECRET_EXITS.MAP08 = false --works to set secret exit
  if secretexit1 == 1 then GAME.SECRET_EXITS.MAP01 = true end --there must be a better way but I don't know it
  if secretexit1 == 2 then GAME.SECRET_EXITS.MAP02 = true end
  if secretexit1 == 3 then GAME.SECRET_EXITS.MAP03 = true end
  if secretexit1 == 4 then GAME.SECRET_EXITS.MAP04 = true end
  if secretexit1 == 5 then GAME.SECRET_EXITS.MAP05 = true end
  if secretexit1 == 6 then GAME.SECRET_EXITS.MAP06 = true end
  if secretexit1 == 7 then GAME.SECRET_EXITS.MAP07 = true end
  if secretexit1 == 8 then GAME.SECRET_EXITS.MAP08 = true end
  if secretexit1 == 9 then GAME.SECRET_EXITS.MAP09 = true end
  if secretexit1 == 10 then GAME.SECRET_EXITS.MAP10 = true end
  if secretexit2 == 11 then GAME.SECRET_EXITS.MAP11 = true end
  if secretexit2 == 12 then GAME.SECRET_EXITS.MAP12 = true end
  if secretexit2 == 13 then GAME.SECRET_EXITS.MAP13 = true end
  if secretexit2 == 14 then GAME.SECRET_EXITS.MAP14 = true end
  if secretexit2 == 15 then GAME.SECRET_EXITS.MAP15 = true end
  if secretexit2 == 16 then GAME.SECRET_EXITS.MAP16 = true end
  if secretexit2 == 17 then GAME.SECRET_EXITS.MAP17 = true end
  if secretexit2 == 18 then GAME.SECRET_EXITS.MAP18 = true end
  if secretexit2 == 19 then GAME.SECRET_EXITS.MAP19 = true end
  if secretexit3 == 20 then GAME.SECRET_EXITS.MAP20 = true end
  if secretexit3 == 21 then GAME.SECRET_EXITS.MAP21 = true end
  if secretexit3 == 22 then GAME.SECRET_EXITS.MAP22 = true end
  if secretexit3 == 23 then GAME.SECRET_EXITS.MAP23 = true end
  if secretexit3 == 24 then GAME.SECRET_EXITS.MAP24 = true end
  if secretexit3 == 25 then GAME.SECRET_EXITS.MAP25 = true end
  if secretexit3 == 26 then GAME.SECRET_EXITS.MAP26 = true end
  if secretexit3 == 27 then GAME.SECRET_EXITS.MAP27 = true end
  if secretexit3 == 28 then GAME.SECRET_EXITS.MAP28 = true end
  if secretexit3 == 29 then GAME.SECRET_EXITS.MAP29 = true end
end
--MAPINFO
STARTERPACK.music =
{
  songs =
  {
  --tech
    "D_RUNNIN", "$MUSIC_STALKS", "$MUSIC_COUNTD", "$MUSIC_BETWEE", "$MUSIC_DOOM",
    "$MUSIC_THE_DA", "$MUSIC_SHAWN",  "$MUSIC_DDTBLU", "$MUSIC_IN_CIT", "$MUSIC_DEAD",
  --urban
    "$MUSIC_STLKS2", "$MUSIC_THEDA2", "$MUSIC_DOOM2", "$MUSIC_RUNNI2", "$MUSIC_DDTBL2",
    "$MUSIC_DEAD2",  "$MUSIC_STLKS3", "D_ROMERO",
  --hell
    "D_SHAWN2", "D_MESSAG", "D_COUNT2", "D_DDTBL3", "$MUSIC_AMPIE",  "$MUSIC_THEDA3", "$MUSIC_ADRIAN",
    "$MUSIC_MESSG2", "D_ROMER2", "D_TENSE",  "D_SHAWN3",
  --other
    "STALKER"
  }
}

local function cyberlordexits() --switches positions of babel and dis (and back again) if big cyberlord boss at babel
 if boss1 == "cyberlordmajor" then
  local temp=secretexit1
  secretexit1=secretexit3
  secretexit3=temp	
 end
end

function STARTERPACK.create_mapinfo()
  
  gui.printf("Mapinfo code is running\n")
  cyberlordexits()
  local data =
  {
    "//\n"
    "// MAPINFO LUMP created by OBLIGE\n"
    "//\n"
    "//Secret exits are in maps " .. tostring(secretexit1) .. ', ' .. tostring(secretexit2) .. ' and ' .. tostring(secretexit3) .. '\n'
    "clearepisodes\n\n"
    'episode map01\n'
    '{\n'
    'name = "Brutal Oblige"\n'
    '}\n\n'
    'map E2M8 "Tower of Babel" //brutality\n'
    '{\n'
    'next = "MAP0' .. tostring(secretexit1 + 1) .. '"\n'
    'sky1 = "SKY3"\n'
    'EnterPic = "INTER3"\n'
    'ExitPic = "INTER3"\n'
    'cluster = 10\n'
    'music = "D_MESSAG"\n' --the music from brutalmaps tower boss battle
    'SpecialAction = "ObligeCyberdemonLord", "Exit_Normal", 0\n'
    'SpecialAction = "ObligeInfernal", "Exit_Normal", 0\n'
    'SpecialAction = "ObligeCyberdemonBoss", "Exit_Normal", 0\n'
    'SpecialAction = "CyberdemonBoss", "Exit_Normal", 0\n'
    '}\n'
    'map E3M8 "Dis" //brutality\n'
    '{\n'
    'next = "MAP' .. tostring(secretexit3 + 1) .. '"\n'
    'sky1 = "FIRESK00"\n'
    'EnterPic = "INTER3"\n'
    'ExitPic = "INTER3"\n'
    'cluster = 10\n'
    'music = "$MUSIC_OPENIN"\n' --the music from brutalmaps final boss battle
    'SpecialAction = "CyberdemonLordMinor", "Exit_Normal", 0\n'
    'SpecialAction = "ObligeCyberdemonLordMinor", "Exit_Normal", 0\n'
    '}\n'
    --brutality has the naming correct whilst brutal has this bollocks
    'map E5M8 "Tower of Babel" //brutalv20b\n'
    '{\n'
    'next = "MAP0' .. tostring(secretexit1 + 1) .. '"\n'
    'sky1 = "SKY3"\n'
    'EnterPic = "INTER3"\n'
    'ExitPic = "INTER3"\n'
    'cluster = 10\n'
    'music = "D_MESSAG"\n'
    'SpecialAction = "ObligeCyberdemonBoss", "Exit_Normal", 0\n'
    'SpecialAction = "CyberdemonBoss", "Exit_Normal", 0\n'
    'SpecialAction = "ObligeInfernal", "Exit_Normal", 0\n'
    'SpecialAction = "ObligeCyberdemonLord", "Exit_Normal", 0\n'
    '}\n'
    'map E3M10 "Dis" //brutalv20b\n'
    '{\n'
    'next = "MAP' .. tostring(secretexit3 + 1) .. '"\n'
    'sky1 = "FIRESK00"\n'
    'EnterPic = "INTER3"\n'
    'ExitPic = "INTER3"\n'
    'cluster = 10\n'
    'music = "$MUSIC_OPENIN"\n'
    'SpecialAction = "CyberdemonLordMinor", "Exit_Normal", 0\n'
    'SpecialAction = "ObligeSuperMastermind", "Exit_Normal", 0\n'
    'SpecialAction = "SuperMastermind", "Exit_Normal", 0\n'
    'SpecialAction = "ObligeCyberdemonLordMinor", "Exit_Normal", 0\n'
    '}\n'
  }
  cyberlordexits()
--rename boss maps based on which boss is there
  for i = 1, (#data) do --for every value in data
   if boss1 == "infernal" then
	data[i] = string.gsub(data[i], '"Tower of Babel"','"The Fires of Babel"')
   elseif boss1 == "cyberlordmajor" then
	data[i] = string.gsub(data[i], '"Tower of Babel"','"The Tower"')	
   end
   if boss2 == "cyberlordminor" then
	data[i] = string.gsub(data[i], '"Dis"','"Distruction"')	
   end
  end

  --- music ---
  local epi_list = STARTERPACK.music
  local dest = { }

  each _,src in epi_list do
    dest = table.copy(src)
    
    -- this shuffle algorithm ensures first entry is never the same
    --once again I can't quite work out the code so I have left this even though I only need half of it
    for i = 1, (#dest-2) do
      local k = rand.irange(i + 1, #dest)
      dest[i], dest[k] = dest[k], dest[i]
    end
  end
    --after this dest[1-#src] are the music tracks
  dest[30] = "$MUSIC_OPENIN" --the epic boss battle music
  dest[31] = "DUTY"
  dest[32] = "DUTY" --when making a full game the last 2 maps are always wolf themed

  local firstmap = 1
  local mapnum = 1

  --- level names ---
  --L.name is MAP01 etc, L.descritption is the nice name
  --L.theme_name gives the theme
  each L in GAME.levels do
    local prefix = PARAM.bex_map_prefix

    if L.description and prefix then --keep the prefix stuff from the bex incase something else relies on it
      local id

      if string.sub(L.name, 1, 1) == 'E' then
        -- Doom I : ExMy
        id = "map" .. L.name

      else
        local pos = 4
        if string.sub(L.name, pos, pos) == '0' then
          pos = pos + 1
        end

        -- Doom II / Final Doom : HUSTR_%d
        id = "map" .. string.sub(L.name, pos)
      end

      local nextmap = 'next = "' .. L.name ..'"\n'

      local sky1 = 'sky1 = "SKY1"' --default sky
      local enterpic = '"INTER1"' --default intermissionpic
      if L.theme_name == "hell" then
	local n = rand.irange(1,2)
	if n == 1 then
          sky1 = 'sky1 = "FIRESK00"'
        else
          sky1 = 'sky1 = "SKY3"'
	end
        enterpic = '"INTER3"'
      elseif L.theme_name == "wolf" then
        sky1 = 'sky1 = "SKY2WOLF"'
        enterpic = '"WOLF1"'
      elseif L.theme_name == "nukem" then
        sky1 = 'sky1 = "SKY2NI"'
        enterpic = '"DNTRIM12"'
      elseif L.theme_name == "urban" then
	local n = rand.irange(1,6)
	if n == 1 then
          sky1 = 'sky1 = "SKY2"'
	elseif n == 2 then
          sky1 = 'sky1 = "SKY2MID"'
	elseif n == 3 then
          sky1 = 'sky1 = "SKY2NO"'
	elseif n == 4 then
          sky1 = 'sky1 = "SKY2RED"'
	elseif n == 5 then
          sky1 = 'sky1 = "SKY2YELO"'
	elseif n == 6 then
          sky1 = 'sky1 = "SKY2MO"'
	end
        enterpic = '"INTER2"'
      elseif L.theme_name == "satanshankerchief" then
	local n = rand.irange(1,3)
        sky1 = 'sky1 = "CHEXSKY' .. n .. '"'
        enterpic = '"CHEXINT"'
      end

      sky1 = sky1 .. '\n' --put in the newline here for convinience
      enterpic = enterpic .. '\n'

      local text = L.name .. ' "' .. L.description ..'"'; --the mapinfo key

      --say that this map comes after the last map
      if firstmap == 0 then
	if mapnum != 31 and mapnum != 32 and mapnum != 33 then --yes I could just do <31 but it might be possible to make Oblige do more than 32 maps in which case this will still work. Number is 1 higher because this is inserted at the start of the next map.
          table.insert(data, nextmap)
        else
	  if mapnum != 32 and mapnum != 33 then
            table.insert(data, 'next = "EndGame3"\n')
	  end
	end
        if mapnum >=11 and mapnum < 21 then--mapnum == 17 then --map 16 has the secret exit to wolf levels. Number is 1 higher because this is inserted at the start of the next map.
          table.insert(data, 'secretnext = "MAP31"\n')
        end
        if mapnum < 11 then --give map 8 a secret exit to tower of bable (included in the brutal and brutality pk3s)
	  if boss1 == "cyberlordmajor" then --if big CyberLord at babel then make that the second boss battle 
	    if OB_CONFIG.game == "brutality" then
              table.insert(data, 'secretnext = "E3M8"\n')
	    elseif OB_CONFIG.game == "brutaldoom" then
              table.insert(data, 'secretnext = "E3M10"\n')
	    end
	  else
	    if OB_CONFIG.game == "brutality" then
              table.insert(data, 'secretnext = "E2M8"\n')
	    elseif OB_CONFIG.game == "brutaldoom" then
              table.insert(data, 'secretnext = "E5M8"\n')
	    end
	  end
        end
        if mapnum >= 21 and mapnum < 30 then --give map 24 a secret exit to spider mastermind battle (included in the brutal and brutality pk3s)
	  if boss1 == "cyberlordmajor" then --if big CyberLord at babel then make this the first boss battle 
	    if OB_CONFIG.game == "brutality" then
              table.insert(data, 'secretnext = "E2M8"\n')
	    elseif OB_CONFIG.game == "brutaldoom" then
              table.insert(data, 'secretnext = "E5M8"\n')
	    end
	  else
	    if OB_CONFIG.game == "brutality" then
              table.insert(data, 'secretnext = "E3M8"\n')
	    elseif OB_CONFIG.game == "brutaldoom" then
              table.insert(data, 'secretnext = "E3M10"\n')
	    end
	  end
        end
        if mapnum == 32 then --first wolf level
          table.insert(data, 'next = "MAP' .. tostring(secretexit2 + 1) .. '"\n')
          table.insert(data, 'secretnext = "MAP32"\n')
        end
        table.insert(data, '\n}\n') --close last map's definition
      else
        firstmap = 0
      end

      --open definition for map
      table.insert(data, string.format("%s %s\n{\n", "map", text))
      --enter map information
      table.insert(data, sky1)
      table.insert(data, 'EnterPic = ' .. enterpic)
      table.insert(data, 'ExitPic = ' .. enterpic)
      if mapnum<31 then
        table.insert(data, 'cluster = 10\n')  -- so you get the enterpic
      else
        table.insert(data, 'cluster = 65\n')
      end
      table.insert(data, 'music = "' .. dest[mapnum] .. '"\n')
      mapnum = mapnum + 1
    end
  end -- for L

  if mapnum == 33 then --second wolf level
    table.insert(data, 'next = "MAP' .. tostring(secretexit2 + 1) .. '"\n')
  else
    table.insert(data, 'next = "EndGame3"\n') --last map ends the game unless it is a secret level (ie anything more or less than full game)
  end
  table.insert(data, "\n}\n"); --close final map definition

--make sure there are no 0s in stupid places
for i = 1, (#data) do --for every value in data
  data[i] = string.gsub(data[i], '"MAP010"','"MAP10"')
  data[i] = string.gsub(data[i], '"MAP011"','"MAP11"')
  data[i] = string.gsub(data[i], '"MAP012"','"MAP12"')
  data[i] = string.gsub(data[i], '"MAP013"','"MAP13"')
  data[i] = string.gsub(data[i], '"MAP014"','"MAP14"')
  data[i] = string.gsub(data[i], '"MAP015"','"MAP15"')
  data[i] = string.gsub(data[i], '"MAP016"','"MAP16"')
  data[i] = string.gsub(data[i], '"MAP017"','"MAP17"')
  data[i] = string.gsub(data[i], '"MAP018"','"MAP18"')
  data[i] = string.gsub(data[i], '"MAP019"','"MAP19"')
  data[i] = string.gsub(data[i], '"MAP020"','"MAP20"')
  data[i] = string.gsub(data[i], '"MAP021"','"MAP21"')
  data[i] = string.gsub(data[i], '"MAP022"','"MAP22"')
  data[i] = string.gsub(data[i], '"MAP023"','"MAP23"')
  data[i] = string.gsub(data[i], '"MAP024"','"MAP24"')
  data[i] = string.gsub(data[i], '"MAP025"','"MAP25"')
  data[i] = string.gsub(data[i], '"MAP026"','"MAP26"')
  data[i] = string.gsub(data[i], '"MAP027"','"MAP27"')
  data[i] = string.gsub(data[i], '"MAP028"','"MAP28"')
  data[i] = string.gsub(data[i], '"MAP029"','"MAP29"')
  data[i] = string.gsub(data[i], '"MAP030"','"MAP30"')
  data[i] = string.gsub(data[i], '"MAP031"','"MAP31"')
  data[i] = string.gsub(data[i], '"MAP032"','"MAP32"')
  data[i] = string.gsub(data[i], '"MAP1"','"MAP01"')
  data[i] = string.gsub(data[i], '"MAP2"','"MAP02"')
  data[i] = string.gsub(data[i], '"MAP3"','"MAP03"')
  data[i] = string.gsub(data[i], '"MAP4"','"MAP04"')
  data[i] = string.gsub(data[i], '"MAP5"','"MAP05"')
  data[i] = string.gsub(data[i], '"MAP6"','"MAP06"')
  data[i] = string.gsub(data[i], '"MAP7"','"MAP07"')
  data[i] = string.gsub(data[i], '"MAP8"','"MAP08"')
  data[i] = string.gsub(data[i], '"MAP9"','"MAP09"')
end

  gui.wad_add_text_lump("MAPINFO", data);
end

function STARTERPACK.setup()
  STARTERPACK.bannersetup();
  STARTERPACK.setsecretexits();
end

function STARTERPACK.all_done()
  STARTERPACK.decorate();
  STARTERPACK.create_mapinfo();
  STARTERPACK.texturesetup();
end

--level setup

STARTERPACK.PREBUILT_LEVELS = --always remove the prebuilt so no conflict with mapinfo lump (map07 special etc)
{
  MAP07  = REMOVE_ME
  GOTCHA = REMOVE_ME
  GALLOW = REMOVE_ME

  MAP30 = --final boss
  {
    { prob=50, file="doom2_boss/icon1.wad", map="MAP30" }
    { prob=50, file="doom2_boss/icon2.wad", map="MAP30" }
    { prob=50, file="doom2_boss/icon3.wad", map="MAP01" }
    { prob=50, file="doom2_boss/icon3.wad", map="MAP02" }
    { prob=50, file="doom2_boss/icon3.wad", map="MAP03" }
  }
}

--table to string function for debugging starts
function table.val_to_str ( v )
  if "string" == type( v ) then
    v = string.gsub( v, "\n", "\\n" )
    if string.match( string.gsub(v,"[^'\"]",""), '^"+$' ) then
      return "'" .. v .. "'"
    end
    return '"' .. string.gsub(v,'"', '\\"' ) .. '"'
  else
    return "table" == type( v ) and table.tostring( v ) or
      tostring( v )
  end
end

function table.key_to_str ( k )
  if "string" == type( k ) and string.match( k, "^[_%a][_%a%d]*$" ) then
    return k
  else
    return "[" .. table.val_to_str( k ) .. "]"
  end
end

function table.tostring( tbl )
  local result, done = {}, {}
  for k, v in ipairs( tbl ) do
    table.insert( result, table.val_to_str( v ) )
    done[ k ] = true
  end
  for k, v in pairs( tbl ) do
    if not done[ k ] then
      table.insert( result,
        table.key_to_str( k ) .. "=" .. table.val_to_str( v ) )
    end
  end
  return "{" .. table.concat( result, "," ) .. "}"
end
--table to string function for debugging ends


OB_THEMES["nukem"] =
{
  label = "Duke Nukem"
  priority = 1
  game = "brutaldoom"
  mod="brutal_starterpack"
  name_class = "URBAN"
  mixed_prob = 0
}

OB_MODULES["brutal_starterpack"] =
{
  label = "Brutal Doom Starter Pack"

  game = { brutaldoom=1 }
  playmode = { sp=1, coop=1 }
  
  hooks =
  {
    setup = STARTERPACK.setup
    all_done = STARTERPACK.all_done
  }

  tables =
  {
    STARTERPACK
  }
}

--wolfenstein monster control---------
STARTERPACK.CONTROL_CHOICES =
{
  "default", "DEFAULT",
  "none",    "None at all",
  "scarce",  "Scarce",
  "less",    "Less",
  "plenty",  "Plenty",
  "more",    "More",
  "heaps",   "Heaps",
  "insane",  "INSANE",
}

STARTERPACK.CONTROL_PROBS =
{
  none   = 0
  scarce = 2
  less   = 15
  plenty = 50
  more   = 120
  heaps  = 300
  insane = 2000
}


function STARTERPACK.control_setup()
  for name,opt in pairs(self.options) do
    local M = GAME.MONSTERS[name]

    if M and opt.value != "default" then
      local prob = STARTERPACK.CONTROL_PROBS[opt.value]

      M.replaces = nil
      M.prob = prob
      M.crazy_prob = prob

      if prob >  80 then M.density = 1.0 ; M.skip_prob = 30 end
      if prob > 180 then M.skip_prob = 0 end
    end
  end -- for opt
end


OB_MODULES["starterpack_wolfenstein_control"] =
{
  label = "Wolfenstein Monster Control"

  game = { brutaldoom=1, brutality=1 }

  mod = "brutal_starterpack"

  hooks =
  {
    control_setup = STARTERPACK.control_setup
  }

  options =
  {
    ClassicSS   = { label="Classic Wolfenstein SS",     choices=STARTERPACK.CONTROL_CHOICES }
    BrutalSS   = { label="Brutal Wolfenstein SS",     choices=STARTERPACK.CONTROL_CHOICES }
    GermanDog   = { label="Dog",     choices=STARTERPACK.CONTROL_CHOICES }
  }
}

OB_MODULES["starterpack_monster_control"] =
{
  label = "Starterpack Monster Control"

  game = { brutaldoom=1, brutality=1 }

  mod = "brutal_starterpack"

  hooks =
  {
    control_setup = STARTERPACK.control_setup
  }

  options =
  {
    HeavyMachinegun   = { label="Heavy Machinegunner",     choices=STARTERPACK.CONTROL_CHOICES }
  }
}
